generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource b {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ==================================================
// ==================================================
enum Role {
  ADMIN
  SALESMAN
  MANAGER
  VIEWER
}

enum CustomerType {
  B2B
  B2C
}

enum OrderStatus {
  Pending
  Processing
  Shipped
  Delivered
  Cancelled
}

enum OrderType {
  SALES
  PURCHASE
}

enum InvoiceStatus {
  Paid
  Pending
  Overdue
  Void
}

type Address {
  street     String
  city       String
  postalCode String
}

// ==================================================
// ==================================================

// Client Account
model Organization {
  id        String   @id @map("_id")
  name      String   @unique
  slug      String?
  logo      String?
  metadata  String?
  address   String?
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products   Product[]
  stocks     Stock[]
  stockItems StockItem[]
  categories Category[]
  customers  Customer[]
  suppliers  Supplier[]
  contacts   ContactPerson[]
  orders     Order[]
  invoices   Invoice[]
  members    Member[]

  @@unique([slug])
  @@index([email])
  @@map("organization")
}

// EMPLOYEE/TEAM MEMBER 
model User {
  id               String   @id @map("_id")
  name             String   @unique
  email            String
  emailVerified    Boolean
  image            String?
  password         String?
  twoFactorEnabled Boolean?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  sessions   Session[]
  accounts   Account[]
  orders     Order[]
  members    Member[]
  twofactors TwoFactor[]

  @@unique([email])
  @@map("user")
}

model TwoFactor {
  id          String @id @map("_id")
  secret      String
  backupCodes String
  userId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Session {
  id                   String   @id @map("_id")
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// junction model for organization and user
model Member {
  id        String   @id @map("_id")
  role      String
  createdAt DateTime

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@map("member")
}

// Item in the inventory
model Product {
  id         String   @id @map("_id")
  name       String
  escription String?
  sku        String
  price      Float
  barcode    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  orderLines OrderLine[]
  stockItems StockItem[]

  @@unique([organizationId, sku])
  @@unique([organizationId, barcode])
  @@index([organizationId])
  @@index([categoryId])
  @@index([name])
}

// classification or grouping for Product Items
model Category {
  id         String   @id @map("_id")
  name       String
  escription String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  products Product[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([name])
}

// physical place where inventory is stored
model Stock {
  id        String   @id @map("_id")
  name      String
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  stockItems StockItem[]

  @@index([organizationId])
  @@index([name])
}

// junction model for stock and product
model StockItem {
  id        String   @id @map("_id")
  quantity  Int // Quantity of THIS product in THIS stock location
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  stockId String
  stock   Stock  @relation(fields: [stockId], references: [id])

  @@unique([organizationId, productId, stockId])
}

// external organization or individual
model Customer {
  id              String       @id @map("_id")
  name            String
  email           String
  customerType    CustomerType
  billingAddress  Address
  shippingAddress Address
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  contacts ContactPerson[]
  sales    Order[]

  @@unique([organizationId, email])
  @@index([organizationId])
  @@index([name])
}

// external organization or individual
model Supplier {
  id           String   @id @map("_id")
  name         String
  email        String
  phone        String
  address      Address
  paymentTerms String
  notes        String?
  tags         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  contacts  ContactPerson[]
  purchases Order[]

  @@unique([organizationId, email])
  @@unique([organizationId, phone])
  @@index([organizationId])
  @@index([name])
}

// Represents a specific individual within a Customer or Supplier
model ContactPerson {
  id        String   @id @map("_id")
  email     String
  jobTitle  String
  firstName String
  lastName  String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  supplierId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, email])
  @@index([organizationId])
  @@index([customerId])
  @@index([supplierId])
}

// single transaction for the movement of products
model Order {
  id          String      @id @map("_id")
  orderDate   DateTime    @default(now())
  status      OrderStatus
  totalAmount Float
  orderType   OrderType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  supplierId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])

  invoice Invoice?

  orderLines OrderLine[]

  @@index([organizationId])
  @@index([userId])
  @@index([customerId])
  @@index([supplierId])
  @@index([orderDate])
}

// single product entry within an Order
model OrderLine {
  id        String   @id @map("_id")
  quantity  Int
  unitPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

// billingocument generated for a sales order
model Invoice {
  id            String        @id @map("_id")
  invoiceNumber String
  invoiceDate   DateTime      @default(now())
  ueDate        DateTime
  totalAmount   Float
  status        InvoiceStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, invoiceNumber])
  @@index([invoiceNumber])
  @@index([invoiceDate])
}
