generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ==================================================
// ==================================================
enum Role {
  ADMIN
  SALESMAN
  MANAGER
  VIEWER
}

enum CustomerType {
  B2B
  B2C
}

enum OrderStatus {
  Pending
  Processing
  Shipped
  Delivered
  Cancelled
}

enum OrderType {
  SALES
  PURCHASE
}

enum InvoiceStatus {
  Paid
  Pending
  Overdue
  Void
}

type Address {
  street     String
  city       String
  postalCode String
}

// ==================================================
// ==================================================

// Client Account
model Company {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  address   String?
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products      Product[]
  stocks        Stock[]
  stockItems    StockItem[]
  categories    Category[]
  customers     Customer[]
  suppliers     Supplier[]
  contacts      ContactPerson[]
  orders        Order[]
  invoices      Invoice[]
  userCompanies UserCompany[]

  @@index([email])
}

// EMPLOYEE/TEAM MEMBER 
model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  username     String   @unique
  email        String   @unique
  passwordHash String
  firstName    String?
  lastName     String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders        Order[]
  userCompanies UserCompany[]
}

// junction model for company and user
model UserCompany {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
}

// Item in the inventory
model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  sku         String
  price       Float
  barcode     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  orderLines OrderLine[]
  stockItems StockItem[]

  @@unique([companyId, sku])
  @@unique([companyId, barcode])
  @@index([companyId])
  @@index([categoryId])
  @@index([name])
}

// classification or grouping for Product Items
model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  products Product[]

  @@unique([companyId, name])
  @@index([companyId])
  @@index([name])
}

// physical place where inventory is stored
model Stock {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  stockItems StockItem[]

  @@index([companyId])
  @@index([name])
}

// junction model for stock and product
model StockItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int // Quantity of THIS product in THIS stock location
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  stockId String @db.ObjectId
  stock   Stock  @relation(fields: [stockId], references: [id])

  @@unique([companyId, productId, stockId])
}

// external company or individual
model Customer {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String
  customerType    CustomerType
  billingAddress  Address
  shippingAddress Address
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  contacts ContactPerson[]
  sales    Order[]

  @@unique([companyId, email])
  @@index([companyId])
  @@index([name])
}

// external company or individual
model Supplier {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  phone        String
  address      Address
  paymentTerms String
  notes        String?
  tags         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  contacts  ContactPerson[]
  purchases Order[]

  @@unique([companyId, email])
  @@unique([companyId, phone])
  @@index([companyId])
  @@index([name])
}

// Represents a specific individual within a Customer or Supplier
model ContactPerson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  jobTitle  String
  firstName String
  lastName  String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId String?   @db.ObjectId
  customer   Customer? @relation(fields: [customerId], references: [id])

  supplierId String?   @db.ObjectId
  supplier   Supplier? @relation(fields: [supplierId], references: [id])

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  @@unique([companyId, email])
  @@index([companyId])
  @@index([customerId])
  @@index([supplierId])
}

// single transaction for the movement of products
model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderDate   DateTime    @default(now())
  status      OrderStatus
  totalAmount Float
  orderType   OrderType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  customerId String?   @db.ObjectId
  customer   Customer? @relation(fields: [customerId], references: [id])

  supplierId String?   @db.ObjectId
  supplier   Supplier? @relation(fields: [supplierId], references: [id])

  invoice Invoice?

  orderLines OrderLine[]

  @@index([companyId])
  @@index([userId])
  @@index([customerId])
  @@index([supplierId])
  @@index([orderDate])
}

// single product entry within an Order
model OrderLine {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  unitPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id])

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

// billing document generated for a sales order
model Invoice {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber String
  invoiceDate   DateTime      @default(now())
  dueDate       DateTime
  totalAmount   Float
  status        InvoiceStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  orderId String @unique @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id])

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  @@unique([companyId, invoiceNumber])
  @@index([invoiceNumber])
  @@index([invoiceDate])
}
